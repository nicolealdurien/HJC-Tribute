{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","comps/Modal.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","motion","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","e","selected","target","files","includes","Modal","selectedImg","classList","contains","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15148241.chunk.js","sourcesContent":["  import firebase from 'firebase/app';\n  import 'firebase/storage';\n  import 'firebase/firestore';\n\n  // Your web app's Firebase configuration\n  var firebaseConfig = {\n    apiKey: \"AIzaSyDgz18hW5XJnws7dxbPZS7q1hKvAzi0nNU\",\n    authDomain: \"hjc-tribute.firebaseapp.com\",\n    projectId: \"hjc-tribute\",\n    storageBucket: \"hjc-tribute.appspot.com\",\n    messagingSenderId: \"678811154295\",\n    appId: \"1:678811154295:web:2176026f80ce47f49fd372\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  const projectStorage = firebase.storage()\n  const projectFirestore = firebase.firestore()\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp\n\n  export { projectStorage, projectFirestore, timestamp }","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config'\n\nconst useFirestore = (collection) => {\n    const [docs, setDocs] = useState([])\n\n    useEffect(() => {\n        const unsub = projectFirestore.collection(collection)\n            .orderBy('createdAt', 'desc')\n            .onSnapshot((snap) => {\n                let documents = []\n                snap.forEach(doc => {\n                    documents.push({...doc.data(),  id: doc.id})\n                })\n                setDocs(documents)\n            })\n        return () => unsub()\n    }, [collection])\n\n    return { docs }\n}\n\nexport default useFirestore","import React from 'react'\nimport useFirestore from '../hooks/useFirestore'\nimport { motion } from 'framer-motion'\n\nconst ImageGrid = ({ setSelectedImg }) => {\n    const { docs } = useFirestore('images')\n    console.log(docs)\n\n    return (\n        <div className=\"img-grid\">\n            { docs && docs.map(doc => (\n                <motion.div className='img-wrap' key={doc.id}\n                    layout\n                    whileHover = {{ opacity: 1 }}\n                    onClick = {() => setSelectedImg(doc.url)}>\n                    <motion.img src={doc.url} alt='herb craig'\n                        initial = {{ opacity: 0 }}\n                        animate = {{ opacity: 1 }}\n                        transition = {{ delay: 1 }} />\n                </motion.div>\n            ))}\n        </div>\n    )\n}\n\nexport default ImageGrid","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>HJC Tribute Gallery</h1>\n      <h2>Herbert John Craig</h2>\n      <h3>Gone But Never Forgotten</h3><br/>\n      <p>If you have photos to share, please upload them here.</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from 'react'\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config'\n\nconst useStorage = (file) => {\n    const [progress, setProgress] = useState(0)\n    const [error, setError] = useState(null)\n    const [url, setUrl] = useState(null)\n\n    useEffect(() => {\n        // references\n        const storageRef = projectStorage.ref(file.name)\n        const collectionRef = projectFirestore.collection('images')\n\n        storageRef.put(file).on('state_changed', (snap) => {\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100\n            setProgress(percentage) \n        }, (err) => {\n            setError(err)\n        }, async () => {\n            const url = await storageRef.getDownloadURL()\n            const createdAt = timestamp()\n            collectionRef.add({ url, createdAt })\n            setUrl(url)\n        })\n    }, [file])\n\nreturn { progress, url, error }\n}\n\nexport default useStorage","import React, { useEffect } from 'react'\nimport useStorage from '../hooks/useStorage'\nimport { motion } from 'framer-motion'\n\nconst ProgressBar = ({ file, setFile }) => {\n    const { url, progress } = useStorage(file)\n\n    useEffect(() => {\n        if(url) {\n            setFile(null)\n        }\n    }, [url, setFile])\n    return (\n        <motion.div className = 'progress-bar' \n            initial = {{ width: 0}}\n            animate = {{ width: progress + '%' }}></motion.div>\n    )\n}\n\nexport default ProgressBar","import React, { useState } from 'react'\nimport ProgressBar from './ProgressBar'\n\nconst UploadForm = () => {\n\n    const [file, setFile] = useState(null)\n    const [error, setError] = useState(null)\n\n    const types = ['image/png', 'image/jpeg', 'image/jpg']\n    \n    const handleChange = (e) => {\n        let selected = e.target.files[0]\n\n        if (selected && types.includes(selected.type)) {\n            setFile(selected)\n            setError(\"\")\n        } else {\n            setFile(null)\n            setError(\"Please select an image file (.png, .jpeg, or .jpg).\")\n        }\n        \n    }\n    \n    return (\n\n        <form>\n            <label>\n                <input type=\"file\" onChange = {handleChange}/>\n                <span>+</span>\n            </label>\n            <div className = 'output'>\n                { error && <div className = 'error'>{error}</div>}\n                { file && <div>{file.name}</div>}\n                { file && <ProgressBar file = {file} setFile = {setFile} />}\n            </div>\n            <div>\n\n            </div>\n        </form>\n    )\n}\n\nexport default UploadForm","import React from 'react'\nimport { motion } from 'framer-motion'\n\nconst Modal = ({ selectedImg, setSelectedImg }) => {\n    \n    const handleClick = (e) => {\n        if(e.target.classList.contains('backdrop')) {\n            setSelectedImg(null)\n        }\n    }\n\n\n    return (\n        <motion.div className='backdrop' onClick = {handleClick}\n            initial = {{ opacity: 0 }}\n            animate = {{ opacity: 1 }}\n            >\n            <img src = {selectedImg} alt = \"enlarged\"/>\n        </motion.div>\n    )\n}\n\nexport default Modal","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport Modal from './comps/Modal'\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null)\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg = {setSelectedImg}/>\n      { selectedImg && <Modal selectedImg = {selectedImg} setSelectedImg = {setSelectedImg}/> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}